{"name": "3. Авторизация без пароля", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n\n.venv/lib/python3.12/site-packages/requests/models.py:963: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x101523c50>, s = 'Service unavailable', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_02_courier_login_api.TestCourierLoginAPI object at 0x1026ac230>, test_number = 3, missing_field = 'password', error_message = 'missing_error', data_combination = 'пароля'\n\n    @allure.description(\n        \"Отправляем POST-запрос на авторизацию курьера с неполными данными. \"\n        \"Проверяем, что система вернёт ошибку, если отсутствует обязательное поле.\"\n    )\n    @pytest.mark.parametrize(\n        \"test_number, missing_field, data_combination, error_message\",\n        [\n            (2, \"login\", \"логина\", \"missing_error\"),\n            (3, \"password\", \"пароля\", \"missing_error\"),\n        ],\n    )\n    def test_login_missing_fields(\n        self, test_number, missing_field, error_message, data_combination\n    ):\n        allure.dynamic.title(f\"{test_number}. Авторизация без {data_combination}\")\n    \n        invalid_data = incorrect_credentials.copy()\n        del invalid_data[\n            missing_field\n        ]  # Удаляем одно из обязательных полей (логин или пароль)\n    \n        response = requests.post(f\"{Url.BASE_URL}/courier/login\", json=invalid_data)\n    \n>       assert response.json() == expected_responses[\"courier_login\"][error_message]\n\nAPI-tests/test_02_courier_login_api.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n.venv/lib/python3.12/site-packages/requests/models.py:971: JSONDecodeError"}, "description": "Отправляем POST-запрос на авторизацию курьера с неполными данными. Проверяем, что система вернёт ошибку, если отсутствует обязательное поле.", "parameters": [{"name": "test_number", "value": "3"}, {"name": "missing_field", "value": "'password'"}, {"name": "data_combination", "value": "'пароля'"}, {"name": "error_message", "value": "'missing_error'"}], "start": 1725834744195, "stop": 1725834804687, "uuid": "f8a71763-b3b6-45e3-b0a7-2eefaeb4bc12", "historyId": "f95b7ddc53e79a2684f0ee7e71c22d6d", "testCaseId": "32be8ec179cd48f71923ff4b8742804f", "fullName": "API-tests.test_02_courier_login_api.TestCourierLoginAPI#test_login_missing_fields", "labels": [{"name": "story", "value": "Тестирование авторизации курьера"}, {"name": "suite", "value": "2. Логин курьера"}, {"name": "parentSuite", "value": "API-tests"}, {"name": "subSuite", "value": "TestCourierLoginAPI"}, {"name": "host", "value": "MacBook-Pro-Vlad.local"}, {"name": "thread", "value": "42063-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "API-tests.test_02_courier_login_api"}]}